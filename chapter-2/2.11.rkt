#lang racket

(define (mul-interval x y)
  (let ((x-l (lower-bound x))
        (x-u (upper-bound x))
        (y-l (lower-bound y))
        (y-u (upper-bound y)))
    (cond ((and (> x-l 0) (> y-l 0))
           (make-interval (* x-l y-l) (* x-u y-u)))
          ((and (< x-u 0) (< y-u 0))
           (make-interval (* x-u y-u) (* x-l y-l)))
          ((and (< x-l 0) (> x-u 0) (> y-l 0))
           (make-interval (* x-l y-u) (* x-u y-u)))
          ((and (> x-l 0) (< y-l 0) (> y-u 0))
           (make-interval (* x-u y-l) (* x-u y-u)))
          ((and (< x-u 0) (> y-l 0))
           (make-interval (* x-l y-u) (* x-u y-l)))
          ((and (< x-u 0) (< y-l 0) (> y-u 0))
           (make-interval (* x-l y-u) (* x-l y-l)))
          ((and (< x-l 0) (> x-u 0) (< y-u 0))
           (make-interval (* x-u y-l) (* x-l y-l)))
          ((and (> x-l 0) (< y-u 0))
           (make-interval (* x-u y-l) (* x-l y-u)))
          (else (let ((p1 (* (lower-bound x) (lower-bound y)))
                      (p2 (* (lower-bound x) (upper-bound y)))
                      (p3 (* (upper-bound x) (lower-bound y)))
                      (p4 (* (upper-bound x) (upper-bound y))))
                  (make-interval (min p2 p3)
                                 (max p1 p4)))))))

(define (make-interval a b) (cons a b))
(define (lower-bound interval) (car interval))
(define (upper-bound interval) (cdr interval))


;(define a (make-interval -1.5 -0.8))
;(define b (make-interval -0.2 0.3))

;(mul-interval a b)